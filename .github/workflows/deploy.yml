name: Deploy Flask Todo App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: flask-todo-app

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --- Terraform Infrastructure Setup First ---
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve

      # --- Extract Terraform Outputs ---
      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: ./infra
        run: |
          echo "ecr_repo_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output -raw aws_region)" >> $GITHUB_OUTPUT
          echo "alb_dns=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

      # --- Docker & ECR Setup ---
      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ steps.tf-outputs.outputs.aws_region }} \
          | docker login --username AWS --password-stdin ${{ steps.tf-outputs.outputs.ecr_repo_url }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            ${{ steps.tf-outputs.outputs.ecr_repo_url }}:latest
            ${{ steps.tf-outputs.outputs.ecr_repo_url }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- ECS Deployment ---
      - name: Force new deployment of ECS service
        run: |
          aws ecs update-service \
            --cluster flask-todo-cluster \
            --service flask-todo-service \
            --force-new-deployment \
            --region ${{ steps.tf-outputs.outputs.aws_region }}

      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster flask-todo-cluster \
            --services flask-todo-service \
            --region ${{ steps.tf-outputs.outputs.aws_region }}

      # --- Post Deployment Summary ---
      - name: Post Deployment Summary
        run: |
          echo "## Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "The application is now available at: http://${{ steps.tf-outputs.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY
