name: Deploy Flask Todo App

on:
  push:
    branches:
      - main  # or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          aws configure set output json
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7  # Specify your Terraform version
          
      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
          
      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init
        
      - name: Validate Terraform
        run: |
          cd terraform
          terraform validate
          
      - name: Plan Terraform changes
        run: |
          cd terraform
          terraform plan
          
      - name: Apply Terraform changes
        run: |
          cd terraform
          terraform apply -auto-approve
          
      - name: Build and push Docker image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Get ECR repository URL from Terraform output
          cd terraform
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
          cd ../server
          
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL || \
          (echo "Standard login failed, trying alternative method..." && \
           TOKEN=$(aws ecr get-authorization-token --region $AWS_REGION --output text --query 'authorizationData[].authorizationToken') && \
           echo $TOKEN | base64 -d | cut -d: -f2 | docker login --username AWS --password-stdin $ECR_REPO_URL)
          
          # Build and push Docker image
          docker build -t flask-todo-app:latest .
          docker tag flask-todo-app:latest $ECR_REPO_URL:latest
          docker push $ECR_REPO_URL:latest
          
      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Force new deployment
          aws ecs update-service --cluster flask-todo-cluster --service flask-todo-service --force-new-deployment --region $AWS_REGION
          
          # Wait for service to stabilize
          aws ecs wait services-stable --cluster flask-todo-cluster --services flask-todo-service --region $AWS_REGION
          
      - name: Print application URL
        run: |
          cd terraform
          echo "Application is available at: http://$(terraform output -raw alb_dns_name)"