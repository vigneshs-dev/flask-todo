name: Deploy Flask Todo App

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: flask-todo-app

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest,${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Force new deployment of ECS service
        run: |
          aws ecs update-service --cluster flask-todo-cluster --service flask-todo-service --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable --cluster flask-todo-cluster --services flask-todo-service
          
      - name: Get ALB DNS Name
        id: get-alb-dns
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names flask-todo-alb --query 'LoadBalancers[0].DNSName' --output text)
          echo "Application URL: http://$ALB_DNS"
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          
      - name: Post Deployment Summary
        run: |
          echo "## Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "The application is now available at: http://${{ steps.get-alb-dns.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY